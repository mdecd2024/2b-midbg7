var tipuesearch = {"pages":[{"title":"41123205-W15","text":"組合鋼球平衡台 組合鋼球平衡台 足球機器人網際場景模擬 1.在可攜程式系統安裝所需的Python模組:pip install pyzmq cbor keyboard 2.在近端電腦上取下倉儲內容:git clone https://github.com/mdecd2023/2a3-pj3ag4 球場、球員、數位計分器與類比計分器場景,以及機器人球員控制程式位於: 2a3-pj3ag4\\downloads\\zmq_football 目錄 3.利用CoppeliaSim 4.5.1 rev1 for IPv6.7z開啟 zmq_football目錄中的site.ttt 4.利用可攜程式系統中的SciTE編輯器開啟zmq_football目錄中的judge.py,按下Tools - Go之後, CoppeliaSim中的足球場景將開始進行模擬,足球從球場正中央拋下,兩隊球員完成列隊,準備接受遠端ZMQ RemoteAPI Python程式操控,以便進行球賽競技. 模擬影片: 到GOOGLE輸入下列網址 https://youtu.be/PVvuAvX78LQ","tags":"w15","url":"./41123205-W15-blog.html"},{"title":"41123230-W15","text":"足球模擬 足球模擬","tags":"w15","url":"./41123230-W15-blog.html"},{"title":"41123205-W14","text":"組合鋼球平衡台 組合鋼球平衡台 將5個零件利用NX1872中的約束指令進行組裝","tags":"w14","url":"./41123205-W14-blog.html"},{"title":"41123230-W14","text":"組合平衡台 組合平衡台","tags":"w14","url":"./41123230-W14-blog.html"},{"title":"41123205-W13","text":"確認進度 各週指定任務 1.個人 cd2024 與分組倉儲的建立及維護. 2.各分組註冊一個 Odoo 帳號, 選用免費的 PLM 模組, 取得各分組的產品生命週期管理系統網域, 並將參考論文的協同翻譯流程作為工作項目, 在各分組的 PLM 網域系統中留下任務分配與紀錄, 最終產出為一份參考論文的中英文翻譯並列 pdf 檔案, 其中包含各組員的心得報告. 3.指定在參考論文的翻譯與閱讀過程, 將各組員的 cd2024 課程倉儲納為分組倉儲的子模組, 可以將各組員倉儲中的 LaTeX 原始資料, 整合至分組倉儲中, 採 Github Actions 或近端使用 MikTeX 建立分組的參考論文閱讀報告 pdf 檔案(教學). 4.要求各分組採協同方式, 在各教學影片上填上字幕並嵌入個人網站, 分工整理影片逐字稿與教學重點, 最後完成期中自評, 在期中考週將自評成績送至教務處. 5.要求下載 Siemens NX 1872 至個人隨身碟或電腦 (含筆電), 後續專案系統的零組件繪圖可採電腦輔助設計室固態硬碟所安裝的 NX1872 或隨身碟中的可攜系統, 必須透過連網取得認證後才能開啟. 6.提醒 CoppeliaSim 不同版本中存檔上的差異, 並強調 cd2024 將沿用 cad2023 課程中所使用的 4.5.1 版. 7.提示 各分組可以利用可攜式 Sourcetree 套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題. 8.在第七週摘要出 cd2024 各項分組協同模式的要點及執行方法. 9.在第八週說明如何應用 AI 協助先前閱讀論文, 整理資料以及延伸模擬程式的方法, 並提出既存鋼球平衡台控制與模擬的實習步驟. 10.第十週起, 要求學員完成三項實習任務. (建立倉儲與網站連結、PID 控制文獻整理、NX 平台零組件繪圖) 11.第十二週的三項實習任務 (NXOpen 零組件繪製、分組倉儲設為評分倉儲子模組、足球機器人場景模擬).","tags":"w13","url":"./41123205-W13-blog.html"},{"title":"41123244-W13","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W13網誌 鋼球平衡台零組件上傳 零件檔 過程檔","tags":"w13","url":"./41123244-W13-blog.html"},{"title":"41123233-W13","text":"任務1","tags":"w13","url":"./41123233-W13-blog.html"},{"title":"41123230-W13","text":"更新前幾週網誌 更新前幾週網誌","tags":"w13","url":"./41123230-W13-blog.html"},{"title":"41123205-W12","text":"各學員利用 NX 1872 繪製鋼球平衡台所需的零組件, 將各分組倉儲設為評分倉儲的子模組, 跨網路操控模擬場景裝置. 鋼球平衡台自動控制系統模擬 NXOpen Python 程式 TO GOOGLE 輸入https://drive.google.com/file/d/1DmwGGZOWa9V9j4-biT4ZLUAbon_0DiEC/view?usp=drive_link下載零件檔與https://drive.google.com/file/d/1ZOICXm_jkRpNZD92DL3qMpA9zQIzdom5/view?usp=drive_link之NXOpen Python 程式 心得:我一開始認為NX是一個非常不直覺得程式，因為每一次當我要在自己所畫的模型之中穿出一個孔時，就常常會要重新選擇挖孔還是增長，所以來終於習慣NX的擠出功能了，繪畫的速度就較為快速了。","tags":"w12","url":"./41123205-W12-blog.html"},{"title":"41123233-W12","text":"利用NX進行繪製圖片錄影，小組進行分配工作 NX零件圖與錄影檔 零件4： 錄影檔 零件檔 完成圖","tags":"w12","url":"./41123233-W12-blog.html"},{"title":"41123247-W12","text":"2024 Spring 各組別利用NX來繪圖 任務1:NX零件圖與錄影檔 每個組別需要利用NX程式來繪製出老師所給的五個圖檔。我們這組為了公平起見，使用抽籤的方式來選出五位組員進行畫圖的行動。由於我沒有被抽到，所以此任務無執行動作。","tags":"w12","url":"./41123247-w12-blog.html"},{"title":"41123244-W12","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W12網誌 1.繪製鋼球平衡台零組件並上傳 2.把分組倉儲設為評分網站子模組","tags":"w12","url":"./41123244-W12-blog.html"},{"title":"41123245-W12","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 協同產品設計實習第十二週實習操作,利用NX1872繪製鋼球平衡台所需的零組件,將分組倉儲設為評分倉儲的子模組,跨網路操控模擬場景裝置.","tags":"w12","url":"./41123245-W12-blog.html"},{"title":"41123221-w12","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,將分配到的圖使用錄影功能紀錄繪製過程. NX繪圖 我分配到的是第三個零件 繪製過程 零件圖檔 長方體尺寸 厚度尺寸 挖孔尺寸及深度 完成圖","tags":"w12","url":"./2120240509.html"},{"title":"41123230-W12","text":"各學員利用 NX 1872 繪製鋼球平衡台所需的零組件 各學員利用 NX 1872 繪製鋼球平衡台所需的零組件 將各分組倉儲設為評分倉儲的子模組 實習任務一: 零件檔:<a href= \"https://www.google.com.tw/\">TO GOOGLE NXOpen python程式檔:<a href= \"https://www.google.com.tw/\">TO GOOGLE 心得:這次使用NX作圖其實還不錯因為之前有使用過，也讓我知道NX其他的使用方法","tags":"w12","url":"./41123230-W12-blog.html"},{"title":"41123205-W11","text":"各學員利用 NX 1872 繪製鋼球平衡台所需的零組件. 鋼球平衡台自動控制系統模擬 利用 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中.","tags":"w11","url":"./41123205-W11-blog.html"},{"title":"41123244-W11","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W11網誌 1.在個人或各組完成階段性改版之前, 先透過獨立分支進行資料改版提交,再與分組分支合併, 最後各組的階段性版本再與建立網頁的主分支進行合併 2.利用 NXOpen 程式分別執行建立 block 與挖孔 3.心得:我認為協同產品設計是一個充滿挑戰和機會的過程，其中的關鍵在於良好的溝通和團隊合作，並找到解決方法，另外在這堂課中也學會了如何撰寫網誌、影片剪輯跟編寫程式，有些地方雖然不是很懂，但會盡量跟上進度，希望這學期可以順利通過","tags":"w11","url":"./41123244-W11-blog.html"},{"title":"41123233-W11","text":"利用上週加入的全班倉儲,在裡面編寫前10週之統整心得,以每組為例 利用上週加入的全班的倉儲,在裡面編寫前10週的來統整心得 因為每個人都可以在上面做更新更改, 這樣就會出現操作上的問題，push得時候只能一個人push,太多人同時推會導致網站亂掉,為了避免此現象的發生,在個人或各組完成階段性改版之前,先透過獨立分支進行資料改版提交與推送,等個人階段性版本確定後, 再與分組分支合併, 最後各組的階段性版本再與建立網頁的主分支進行合併。","tags":"w11","url":"./41123233-W11-blog.html"},{"title":"41123247-W11","text":"2024 Spring 使用上週加入的全班倉儲，在裡面編寫前10週之心得統整，以每組為例。 使用上週加入的全班倉儲，在裡面編寫前10週的心得統整，以每組為例。 因為每個人都有權限可在上面改版，這樣就會出現一個問題:在 push 的時候只能有一個人推，如果全部的人同時推的話，就會出現一大堆的亂碼。我們所編輯的內容都會亂跑，這時就有個可行方法能解決這個問題並預防此問題的產生。就是在個人或各組完成階段性改版之前，先透過獨立分支進行資料改版提交與推送，等個人階段性版本確定後，再與分組組別進行分支合併，最後各組的階段性版本再與建立網頁的主分支進行合併。","tags":"w11","url":"./41123247-w11-blog.html"},{"title":"41123245-W11","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 協同產品設計實習第十一週實習操作,利用NX1872繪製鋼球平衡台所需的零組件.","tags":"w11","url":"./41123245-W11-blog.html"},{"title":"41123221-w11","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,統整心得. 利用上週加入的全班倉儲,編寫前10週之統整心得 在一個共同編輯的環境中,每個人都有權限對內容進行修改。然而,如果每個人都同時提交修改,可能會導致混亂和錯誤的情況發生,因為我們的修改可能會互相衝突。為了避免這種情況,我們可以使用分支的方法來進行修改。這意味著每個人在進行修改之前都會從主分支上創建一個獨立的分支。在完成個人或小組的修改後,我們可以將這些修改合併到主分支中。這樣做可以確保我們的修改不會互相干擾,同時也能保證主分支上的內容始終保持正確和完整.","tags":"w11","url":"./2120240502.html"},{"title":"41123230-W11","text":"利用 NXOpen Python 建立鋼球平衡台中的平台零件 利用 NXOpen Python 建立鋼球平衡台中的平台零件 請根據 Solvespace_model _2d_for_cd2024_w6.7z 零組件尺寸, 利用 Siemens NX1872.7z (需要登入 @nfu.edu.tw, cd2024 採用電腦安裝的 NX1872 或隨身碟中的 NX1872) 執行零組件繪圖, 完成後請將過程影片放入個人與分組網站中. 建立協同 Web-based 機電系統模擬設計必須涉及的議題包括： 如何使用 NX 執行零組件繪圖 如何使用1872版安裝及可攜版 如何啓動及連網認證 了解啓動後用戶設定的存檔位置 認識 NX 的目錄模組架構 認識 NXOpen Python 程式延伸架構 了解 Journal 程式設定、建立及執行 了解如何針對設計繪圖尺寸單位選擇 - 學習草圖建構、參數選用及長出特徵使用 - 學習如何完成零件組立 - 了解零組件轉檔相關知識（如選用零組件座標系統、STL格式及尺寸比例） 了解如何轉入 CoppeliaSim，如何選擇合用的尺寸及比例 了解如何進行場景組件的座標系統轉換 了解開放式機構及封閉式機構的場景如何設置 認識場景存檔的三種格式（binary與XML間的轉換及應用)及應用時機 瞭解如何運用 Web-based 場景模擬串流 學習如何建立場景控制程式（internal Lua、Python、Remoteapi Python、IPv4 Websocket&ZMQ vs IPv6 Websocket&ZMQ) 了解如何協同整理資料、編寫網誌、建立網際簡報及結案報告","tags":"w11","url":"./41123230-W11-blog.html"},{"title":"41123205-W10","text":"請下載 cd2024_ball_balancing_platform_control_ref.7z, 閱讀後請將摘要內容放入個人與分組網誌中. 鋼球平衡台 PID 控制與模擬 請下載 cd2024_ball_balancing_platform_control_ref.7z, 閱讀後請將摘要內容放入個人與分組網誌中. 各篇論文要點摘要： 文章一：球體平衡平台的構建與理論研究 問題： 控制理論在穩定動態系統時的局限性 解決方案： 構建球體平衡平台並與理論模型進行比較 結論： 線性控制可以實現良好的性能，但存在靜態誤差。理論與實際結果的差異主要來自於物理模型的誤差和電子元件的非理想特性。穩定動態系統的性能受限於狀態調整的靈活性、控制器設計和輸入數據的準確性。 文章二：基於FPGA並行實現的球體平衡平台實時控制系統 問題： 提高球體位置控制精度 解決方案： 使用PID控制器和FPGA並行計算 結論： PID控制器與FPGA並行計算可以有效提高球體位置控制精度。該方案可應用於控制具有多個參數的高速物件。 文章三：基於狀態空間方法的雙軸平台球體位置控制的模擬與實驗研究 問題： 穩定控制球體位置和軌跡追踪 解決方案： 設計並比較三種控制結構：PD控制器、狀態空間反饋和帶狀態空間回饋的狀態空間觀測器 結論： 三種控制結構均能實現穩定控制，但狀態空間觀測器具有最佳性能。該研究建立了一個教育平台，用於向非技術人員解釋基本控制系統原理。 文章四：面向控制理論課程的球體平衡系統設計與實現 問題： 低成本的教育工具，用於教授控制理論應用 解決方案： 開發使用微控制器和控制算法的球體平衡系統 結論： 球體平衡系統是一種低成本的教育工具，可用於教授控制理論應用。該系統允許學生將理論知識應用於實踐中，並了解閉環回饋系統和PID算法的原理。 文章五：基於平板的球體平衡控制系統 問題： 成本效益高且易於控制的球體平衡平台 解決方案： 設計使用AVR微控制器的雙環下屬控制系統，使用PID控制器維持球體平衡 結論： 該系統使用步進電機替代伺服電機，並無需外部電腦進行圖像處理，具有成本效益和易於控制的優勢。未來計劃改進球體位置回饋信號的濾波，以提高控制系統的速度和品質。 文章六：使用QUARC進行二維球體平衡器控制 問題： 測試和驗證球體平衡控制算法的實驗平台 解決方案： 使用QUARC軟體設計和實現二維平台上的球體位置控制 結論： PD和PID控制器均能實現球體位置控制，但PID控制器在跟踪斜坡和正弦參考信號時具有更好的性能。該實驗涵蓋了建模、控制器設計、模擬和實施等多個控制系統的關鍵步驟，為學生提供了寶貴的學習經驗。","tags":"w10","url":"./41123205-W10-blog.html"},{"title":"41123245-W10","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引.","tags":"w10","url":"./41123245-W10-blog.html"},{"title":"41123233-W10","text":"任務1 根據老師所給的 2a.txt 裡的['學號', 'Github 帳號', '組別'], 以下是利用 Python 寫的初步資料數列. from browser import window, ajax def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html. 並列出-學員倉儲連結/學員網站連結/2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別 下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板： from browser import window, ajax, document, html def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) # 生成 HTML 元素 generate_html(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 生成 HTML 元素 def generate_html(data): brython_div = document[\"brython_div1\"] course_title = \"cd2024\" for student_id, github_username, group in data: # 如果GitHub用戶名為空，將其設置為\"000\" github_username = github_username if github_username else \"000\" # 創建網址和倉庫的鏈接 site_url = f\"https://{github_username}.github.io/{course_title}\" repo_url = f\"https://github.com/{github_username}/{course_title}\" group_repo_url = f\"https://github.com/mdecd2024/2a-midag{group}\" # 生成HTML元素並插入到div中 brython_div <= html.A(student_id, href=site_url) + \" | \" + \\ html.A(\"GitHub Repo\", href=repo_url) + \" | \" + \\ html.A(\"Group Repo\", href=group_repo_url) + html.BR() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 這段程式碼會從 CSV 檔案中讀取學員的基本資料（學號、GitHub 帳號、組別），然後使用 for 迴圈生成 HTML 元素，並將這些元素插入到網頁中。你可以根據需要修改 generate_html 函式中的 HTML 元素結構，以符合你的需求。 任務2 文章一 : Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究) 摘要內容 : 通過實施自動控制理論穩定動態系統時的局限性, 球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰. 文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現) 摘要內容 : 在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體。 文章三 : Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究) 摘要內容 : 本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。 文章四：Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現） 摘要內容：開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統。 文章五: Ball on the plate balancing control system (板上球平衡控制系統) 摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。 文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制) 摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。 任務3","tags":"w10","url":"./41123233-W10-blog.html"},{"title":"41123247-W10","text":"任務1 from browser import window, ajax def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html. 並列出-學員倉儲連結/學員網站連結/2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別 下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板： from browser import window, ajax, document, html def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) # 生成 HTML 元素 generate_html(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 生成 HTML 元素 def generate_html(data): brython_div = document[\"brython_div1\"] course_title = \"cd2024\" for student_id, github_username, group in data: # 如果GitHub用戶名為空，將其設置為\"000\" github_username = github_username if github_username else \"000\" # 創建網址和倉庫的鏈接 site_url = f\"https://{github_username}.github.io/{course_title}\" repo_url = f\"https://github.com/{github_username}/{course_title}\" group_repo_url = f\"https://github.com/mdecd2024/2a-midag{group}\" # 生成HTML元素並插入到div中 brython_div <= html.A(student_id, href=site_url) + \" | \" + \\ html.A(\"GitHub Repo\", href=repo_url) + \" | \" + \\ html.A(\"Group Repo\", href=group_repo_url) + html.BR() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 任務2 文章一 : Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究) 摘要內容 : 通過實施自動控制理論穩定動態系統時的局限性, 球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰. 文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現) 摘要內容 : 在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體。 文章三 : Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究) 摘要內容 : 本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。 文章四：Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現） 摘要內容：開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統。 文章五: Ball on the plate balancing control system (板上球平衡控制系統) 摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。 文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制) 摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。 任務3","tags":"w10","url":"./41123247-w10-blog.html"},{"title":"41123247-W13","text":"任務1 from browser import window, ajax def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html. 並列出-學員倉儲連結/學員網站連結/2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別 下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板： from browser import window, ajax, document, html def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) # 生成 HTML 元素 generate_html(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 生成 HTML 元素 def generate_html(data): brython_div = document[\"brython_div1\"] course_title = \"cd2024\" for student_id, github_username, group in data: # 如果GitHub用戶名為空，將其設置為\"000\" github_username = github_username if github_username else \"000\" # 創建網址和倉庫的鏈接 site_url = f\"https://{github_username}.github.io/{course_title}\" repo_url = f\"https://github.com/{github_username}/{course_title}\" group_repo_url = f\"https://github.com/mdecd2024/2a-midag{group}\" # 生成HTML元素並插入到div中 brython_div <= html.A(student_id, href=site_url) + \" | \" + \\ html.A(\"GitHub Repo\", href=repo_url) + \" | \" + \\ html.A(\"Group Repo\", href=group_repo_url) + html.BR() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 任務2 文章一 : Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究) 摘要內容 : 通過實施自動控制理論穩定動態系統時的局限性, 球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰. 文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現) 摘要內容 : 在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體。 文章三 : Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究) 摘要內容 : 本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。 文章四：Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現） 摘要內容：開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統。 文章五: Ball on the plate balancing control system (板上球平衡控制系統) 摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。 文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制) 摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。 任務3","tags":"w13","url":"./41123247-w13-blog.html"},{"title":"41123244-W10","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W10網誌 1.下載檔案後並閱讀內容將摘要內容放入個人與分組網誌中 2.鋼球平衡台零組件繪圖,完成後將過程影片放入個人與分組網站中","tags":"w10","url":"./41123244-W10-blog.html"},{"title":"41123221-w10","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,協同產品設計實習第十週實習操作,透過 ChatGPT、Gemini 1.5 Pro 與 Claude 3 的協助下進行. 任務一 根據老師所給的 2b.txt 裡的[\"學號\", \"Github 帳號\", \"組別\"], 以下是利用 Python 寫的初步資料數列. from browser import window, ajax def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html. 並列出-學員倉儲連結/學員網站連結/2b 分組倉儲連結 template: https://github.com/mdecd2024/2b-midag組別 下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板： from browser import window, ajax, document, html def fetch_csv_data(): # CSV 檔案網址 url = \"https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt\" def on_complete(req): if req.status == 200 or req.status == 0: # 讀取 CSV 檔案內容 content = req.text # 依照換行符號拆分資料 lines = content.split('\\n') # 建立空列表儲存資料 data = [] # 遍歷每一行資料 for line in lines: # 忽略空白行 if line.strip() == \"\": continue # 依照逗號拆分資料 items = line.split(',') # 將拆分後的資料加入列表 data.append(items) # 印出結果 print(data) # 生成 HTML 元素 generate_html(data) else: print(\"Error:\", req.text) # 發送 AJAX 請求 req = ajax.ajax() req.bind('complete', on_complete) req.open('GET', url, True) req.set_header('content-type', 'application/x-www-form-urlencoded') req.send() # 生成 HTML 元素 def generate_html(data): brython_div = document[\"brython_div1\"] course_title = \"cd2024\" for student_id, github_username, group in data: # 如果GitHub用戶名為空，將其設置為\"000\" github_username = github_username if github_username else \"000\" # 創建網址和倉庫的鏈接 site_url = f\"https://{github_username}.github.io/{course_title}\" repo_url = f\"https://github.com/{github_username}/{course_title}\" group_repo_url = f\"https://github.com/mdecd2024/2a-midag{group}\" # 生成HTML元素並插入到div中 brython_div <= html.A(student_id, href=site_url) + \" | \" + \\ html.A(\"GitHub Repo\", href=repo_url) + \" | \" + \\ html.A(\"Group Repo\", href=group_repo_url) + html.BR() # 呼叫函式讀取 CSV 資料 fetch_csv_data() 這段程式碼會從 CSV 檔案中讀取學員的基本資料（學號、GitHub 帳號、組別），然後使用 for 迴圈生成 HTML 元素，並將這些元素插入到網頁中。你可以根據需要修改 generate_html 函式中的 HTML 元素結構，以符合你的需求。 任務二 文章一 : Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究) 探討在實施自動控制理論以穩定動態系統時所遇到的限制。它關注於球平衡平台的結構和理論研究，並通過實際裝置來展示自動控制理論在穩定動態系統中的局限性。為了進行比較，需要設計一個滿足系統需求的令人滿意的控制器。在設備和控制方面，引入了比例積分導數控制器來平衡平台上的球體系統。此外，還允許分析以確定穩定自然不穩定或半穩定系統的限制。最後，建立了球體平衡平台的理論模型，並與實際搭建的平台進行了比較，分析了理論與實際結果之間的差異，並探討了控制理論與系統實施所面臨的挑戰。 文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現) 在一個FPGA晶片上，開發了兩個並行的PID控制器，用於獨立控制一個物件的兩個參數。確保了PID控制器對控制物件的輪廓計算進行並行處理，調節器的輸出已經被歸一化。透過自然類比，提高了在平台上調節球位置的精度。這種設計的控制器可用於即時控制具有許多受控參數的高速物體。 文章三 : Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究) 本研究詳細設計並比較了三種控制結構，以實現自動穩定球在平板上的位置和球的軌跡跟蹤。這三種結構分別是PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過了設計和實際比較。這些結構共同的特點是它們的控制器參數計算方法。此外，本文還包括了通過牛頓方法推導的平板上球的數學模型和直流電機位置迴路控制。 文章四：Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現） 利用微控制器和相關控制算法，開發了一個球平衡系統，以保持球在橫樑上的平衡，並透過即時感測反饋來調整橫樑的角度。製作了三個原型並進行了比較，特別是在合理性和成本方面。整個系統設計包括一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，這樣的設計使得系統易於實現。通過微控制器程式設計來理解和實現控制算法，對於對MATLAB了解不多的學生也是適用的。開發了介面程式，以在MATLAB中繪製即時位置曲線。這個簡化的系統不僅作為理論知識和實踐技能之間的橋樑，同時也適用於更複雜的系統。 文章五: Ball on the plate balancing control system (板上球平衡控制系統) 平衡問題一直是持續的研究挑戰，在許多領域都有應用，從教育到交通。二自由度球平衡實驗室試驗台是了解控制系統的重要設備之一。本文主要介紹了用於板上平衡球的機械設計。通過電阻式觸摸屏獲取球體位置數據，並使用步進電機和位置傳感器來控制平台的傾斜角度。設計基於AVR微控制器的雙環下位控制系統，利用PID控制器來維持球體的平衡。 文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制) 利用QUARC軟體，我們設計並實現了對二維平台上球體位置的控制系統。我們設計了PD和PID控制器，並研究了設定點權重和積分器抗飽和等控制技術。透過攝像頭讀取球體位置，我們進行了校準和轉換，以確保控制系統的準確性和穩定性。 任務三","tags":"w10","url":"./2120240425.html"},{"title":"41123230-W10","text":"鋼球平衡台 PID 控制與模擬 鋼球平衡台 PID 控制與模擬 這是 W10 實習的任務一: 已知: 2b 初步資料放入數列 可以將 2b.txt 即時資料取出, 並且將每一行隔開後, 逐一放入數列. 後續處理: 只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html. 學員倉儲連結 template: https://github.com/學員帳號/cd2024 學員網站連結 template: https://學員帳號.github.io/cd2024 2b 分組倉儲連結 template: https://github.com/mdecd2024/2b-midbg組別 2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別 這是 W10 實習的任務二: 請下載 cd2024_ball_balancing_platform_control_ref.7z, 閱讀後請將摘要內容放入個人與分組網誌中.","tags":"w10","url":"./41123230-W10-blog.html"},{"title":"41123205-W9","text":"期中考週 期中考週 對 Gemini 1.5 Pro 提問: 以下為利用 PID 控制 CoppeliaSim 鋼球平衡台場景的 ZMQ RemoteAPI Python 程式, 請利用 Python 模組將系統控制過程, 鋼球在平衡台上的 x 方向座標與 y 方向, 利用 matplotlib 畫出來. \"這裡附上原本的 PID 控制程式碼\" import zmq import time import matplotlib.pyplot as plt import numpy as np #ZMQ 連接設定 context = zmq . Context () socket = context . socket ( zmq . REQ ) socket . connect ( \"tcp://127.0.0.1:5555\" ) #PID 控制參數 Kp = 0.5 Ki = 0.1 Kd = 0.01 #參考資料 reference_x = 0.0 reference_y = 0.0 #實際狀態 x = 0.0 y = 0.0 #誤差 error_x = 0.0 error_y = 0.0 #累積誤差 integral_error_x = 0.0 integral_error_y = 0.0 #導數誤差 derivative_error_x = 0.0 derivative_error_y = 0.0 #控制訊號 control_signal_x = 0.0 control_signal_y = 0.0 #時間軸 time_axis = [] #x 方向座標 x_axis = [] #y 方向座標 y_axis = [] #模擬時間 simulation_time = 10.0 #模擬步長 simulation_step = 0.01 #開始模擬 start_time = time . time () while time . time () < start_time + simulation_time : # 讀取實際狀態 request = \"get state\" socket . send_string ( request ) response = socket . recv_string () state = eval ( response ) x = state [ \"x\" ] y = state [ \"y\" ] # 計算誤差 error_x = reference_x - x error_y = reference_y - y # 累積誤差 integral_error_x += error_x * simulation_step integral_error_y += error_y * simulation_step # 導數誤差 derivative_error_x = ( x - previous_x ) / simulation_step derivative_error_y = ( y - previous_y ) / simulation_step # 更新控制訊號 control_signal_x = Kp * error_x + Ki * integral_error_x + Kd * derivative_error_x control_signal_y = Kp * error_y + Ki * integral_error_y + Kd * derivative_error_y # 限制控制訊號 control_signal_x = max ( - 10.0 , min ( 10.0 , control_signal_x )) control_signal_y = max ( - 10.0 , min ( 10.0 , control_signal_y )) # 送出控制訊號 request = \"set force\" data = { \"force_x\" : control_signal_x , \"force_y\" : control_signal_y } socket . send_string ( request ) socket . send_string ( str ( data )) # 記錄數據 time_axis . append ( time . time () - start_time ) x_axis . append ( x ) y_axis . append ( y ) # 更新狀態 previous_x = x previous_y = y # 延遲模擬步長 time . sleep ( simulation_step ) #關閉 ZMQ 連接 socket . close () #繪製圖表 plt . figure ( figsize = ( 10 , 6 )) plt . subplot ( 2 , 1 , 1 ) plt . plot ( time_axis , x_axis , label = \"x\" ) plt . plot ( time_axis , reference_x * np . ones_like ( time_axis ), label = \"reference_x\" ) plt . xlabel ( \"Time (s)\" ) plt . ylabel ( \"Position (m)\" ) plt . legend () plt . subplot ( 2 , 1 , 2 ) plt . plot ( time_axis , y_axis , label = \"y\" ) plt . plot ( time_axis , reference_y * np . ones_like ( time_axis ), label = \"reference_y\" ) plt . xlabel ( \"Time (s)\" ) plt . ylabel ( \"Position (m)\" ) plt . legend () plt . tight_layout () plt . show ()","tags":"w9","url":"./41123205-W9-blog.html"},{"title":"41123233-W9","text":"鋼球平衡台 PID 控制與模擬 以下為利用 PID 控制 CoppeliaSim 鋼球平衡台場景的 ZMQ RemoteAPI Python 程式, 請利用 Python 模組將系統控制過程, 鋼球在平衡台上的 x 方向座標與 y 方向, 利用 matplotlib 畫出來. \"這裡附上原本的 PID 控制程式碼\" Model 使用 Matplotlib 將 CoppeliaSim 鋼球平衡台的 x, y 座標視覺化 由於您沒有提供原始的 PID 控制程式碼，我將提供一個範例程式碼框架，其中包含使用 Matplotlib 繪製 x, y 座標的功能。請將您的 PID 控制邏輯和與 CoppeliaSim 的通信部分添加到相應的位置。 import zmq import time import matplotlib.pyplot as plt CoppeliaSim 連線資訊 HOST = \"127.0.0.1\" # 更改為您的 CoppeliaSim 主機地址 PORT = 23000 # 更改為您的 CoppeliaSim 端口號 建立 ZMQ context 和 socket context = zmq.Context() socket = context.socket(zmq.REQ) socket.connect(\"tcp://{}:{}\".format(HOST, PORT)) PID 控制參數 (替換為您的實際參數) Kp = 1.0 Ki = 0.0 Kd = 0.0 初始化圖表 plt.ion() # 開啟互動模式 fig, ax = plt.subplots() x_data, y_data = [], [] line, = ax.plot(x_data, y_data, 'r-') ax.set_xlim([-1, 1]) # 設定 x 軸範圍 (根據您的場景調整) ax.set_ylim([-1, 1]) # 設定 y 軸範圍 (根據您的場景調整) ax.set_xlabel(\"X\") ax.set_ylabel(\"Y\") plt.title(\"Ball Position\") 主循環 while True: # 讀取鋼球當前 x, y 座標 (替換為您的實際讀取方式) x, y = get_ball_position(socket) # PID 控制邏輯 (替換為您的實際 PID 控制邏輯) control_signal = pid_control ( x , y , Kp , Ki , Kd ) # 將控制信號發送到 CoppeliaSim (替換為您的實際發送方式) send_control_signal ( socket , control_signal ) # 更新圖表數據 x_data . append ( x ) y_data . append ( y ) line . set_data ( x_data , y_data ) fig . canvas . draw () fig . canvas . flush_events () time . sleep ( 0.01 ) # 調整延遲時間 停止仿真 (替換為您的實際停止方式) stop_simulation(socket) 關閉 socket 和 context socket.close() context.term() Use code with caution. Python 說明: 連線到 CoppeliaSim: 使用 ZMQ 建立與 CoppeliaSim 的連接。 PID 參數: 設定您的 PID 控制器的參數 (Kp, Ki, Kd)。 初始化圖表: 使用 Matplotlib 创建一个实时更新的图表，用于显示 x, y 좌표。 主循环: 讀取鋼球的 x, y 座標。 使用 PID 控制邏輯计算控制信号。 將控制信號發送到 CoppeliaSim。 更新圖表數據並顯示。 停止仿真: 停止 CoppeliaSim 的仿真。 请注意: 您需要将 get_ball_position, pid_control, send_control_signal 和 stop_simulation 替换为您自己的函数，以完成与 CoppeliaSim 的通信和控制逻辑。 根據您的場景調整 x 軸和 y 軸的範圍。 調整 time.sleep 的延遲時間，以控制更新頻率。","tags":"w9","url":"./41123233-W9-blog.html"},{"title":"41123247-W9","text":"2024 Spring 協同產品設計實習課程教導, w1-w6內容統整 鋼球平衡台 PID 控制與模擬 使用 matplotlib 可視化 CoppeliaSim 鋼球平衡台 PID 控制 由於您沒有提供原本的 PID 控制程式碼，我將提供一個帶有 matplotlib 可視化的示例框架。請將您的 PID 控制邏輯替換到相應位置。 import zmq import time import matplotlib.pyplot as plt ZMQ 參數 context = zmq.Context() socket = context.socket(zmq.REQ) socket.connect(\"tcp://localhost:23000\") PID 控制參數 (請根據您的實際情況調整) Kp = 1.0 Ki = 0.1 Kd = 0.01 初始化 prev_error = 0 integral = 0 x_history = [] y_history = [] 控制迴圈 while True: # 獲取鋼球位置 socket.send_string(\"getBallPosition\") message = socket.recv_string() x, y = map(float, message.split(\",\")) # PID 控制邏輯 (請替換為您的控制邏輯) error = 0 - x # 假設目標位置為 x=0 integral += error * dt derivative = (error - prev_error) / dt output = Kp * error + Ki * integral + Kd * derivative # 發送控制信號 (請根據您的實際情況修改) socket.send_string(f\"setMotorSpeed,{output}\") _ = socket.recv_string() # 紀錄歷史數據 x_history.append(x) y_history.append(y) # 更新誤差 prev_error = error # 延遲 time.sleep(0.01) # 繪製圖表 (例如每 100 步繪製一次) if len(x_history) % 100 == 0: plt.plot(x_history, label=\"X\") plt.plot(y_history, label=\"Y\") plt.legend() plt.xlabel(\"Time\") plt.ylabel(\"Position\") plt.show() Use code with caution. Python 說明: ZMQ 通訊: 使用 ZMQ 與 CoppeliaSim 進行通訊，獲取鋼球位置並發送控制信號。 PID 控制邏輯: 示例中使用一個簡單的 PID 控制邏輯，您需要替換為您的實際控制邏輯。 數據記錄: 紀錄鋼球的 x 和 y 方向座標歷史數據。 matplotlib 可視化: 使用 matplotlib 繪製 x 和 y 方向座標随時間變化的圖表，以便觀察控制效果。 請注意: 您需要根據您的實際情況修改 ZMQ 通訊端口、PID 控制參數、控制信號格式以及繪圖頻率。 確保您已經安裝了必要的 Python 模塊，例如 zmq 和 matplotlib。 希望這個示例框架能幫助您可視化 CoppeliaSim 鋼球平衡台的 PID 控制過程。","tags":"w9","url":"./41123247-w9-blog.html"},{"title":"41123245-W9","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 鋼球平衡台PID控制與模擬 1.開啟可攜程式系統中的 CoppeliaSim 2.開啟鋼球平衡台模擬場景 3.啟動可攜程式系統, pip install keyboard cbor pyzmq matplotlib 4.在 SciTE 中執行上列程式, 確定系統穩定後, 按下 q 終止模擬 5.matplotlib 將畫出鋼球在平台上的 x 與 y 座標圖","tags":"w9","url":"./41123245-W9-blog.html"},{"title":"41123244-W9","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W9網誌 2b期中自評分數上傳 41123244 65分","tags":"w9","url":"./41123244-W9-blog.html"},{"title":"41123221-w9","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引","tags":"w9","url":"./2120240418.html"},{"title":"41123230-W9期中考週","text":"期中考週 期中考週 對 Gemini 1.5 Pro 提問: 以下為利用 PID 控制 CoppeliaSim 鋼球平衡台場景的 ZMQ RemoteAPI Python 程式, 請利用 Python 模組將系統控制過程, 鋼球在平衡台上的 x 方向座標與 y 方向, 利用 matplotlib 畫出來. \"這裡附上原本的 PID 控制程式碼\" 回答: #導入必要的模組 import zmq import time import matplotlib.pyplot as plt #建立 ZMQ context 和 socket context = zmq . Context () socket = context . socket ( zmq . REQ ) socket . connect ( \"tcp://localhost:23000\" ) #PID 控制參數（請替換為您的實際參數） Kp = 1.0 Ki = 0.1 Kd = 0.01 #初始化變數 x_positions = [] y_positions = [] prev_error = 0 integral_error = 0 #控制循環 while True : # 獲取鋼球的 x 和 y 方向座標（請替換為您的實際程式碼） socket . send ( b \"get_ball_position\" ) message = socket . recv_json () x_position = message [ \"x\" ] y_position = message [ \"y\" ] # 將座標添加到列表中 x_positions . append ( x_position ) y_positions . append ( y_position ) # 計算 PID 控制輸出（請替換為您的實際程式碼） error = # ... 計算誤差 ... integral_error += error derivative_error = error - prev_error output = Kp * error + Ki * integral_error + Kd * derivative_error prev_error = error # 發送控制指令到 CoppeliaSim（請替換為您的實際程式碼） # ... # 繪製圖形 plt . clf () # 清除之前的圖形 plt . plot ( x_positions , label = \"X Position\" ) plt . plot ( y_positions , label = \"Y Position\" ) plt . xlabel ( \"Time\" ) plt . ylabel ( \"Position\" ) plt . legend () plt . pause ( 0.01 ) # 暫停以便圖形更新 # 延遲 time . sleep ( 0.01 ) #關閉 socket 和 context socket . close () context . term () 程式碼說明: 程式碼首先導入必要的模組，包括 zmq 用于與 CoppeliaSim 通信，time 用于延遲，以及 matplotlib.pyplot 用于繪圖。建立 ZMQ context 和 socket，並連接到 CoppeliaSim 的 RemoteAPI 端口。 初始化 PID 控制參數、變數和用於存儲鋼球座標的列表。 控制循環中，首先獲取鋼球的 x 和 y 方向座標。 計算 PID 控制輸出並發送控制指令到 CoppeliaSim。 將座標添加到列表中，並使用 matplotlib 繪製 x 和 y 方向座標隨時間變化的圖形。 程式最後關閉 socket 和 context。 請注意: 您需要將示例程式碼中的 PID 控制部分替換為您的實際程式碼。 您需要根據您的場景調整 get_ball_position 函數以獲取鋼球的座標。 您可以根據需要調整 matplotlib 繪圖參數以獲得更清晰的視覺化效果。 希望這個示例程式碼能幫助您使用 matplotlib 視覺化 CoppeliaSim 鋼球平衡台 PID 控制過程。","tags":"w9","url":"./41123230-W9-blog.html"},{"title":"41123205-W8","text":"錄開學至現在所做的進度 期中報告影片 錄開學至現在所做的進度 1.在about標題下新增各成員學號及倉儲和靜態網站鏈結。 2.錄製個人期中影片","tags":"w8","url":"./41123205-W8-blog.html"},{"title":"41123233-W8","text":"期中影片錄製","tags":"w8","url":"./41123233-W8-blog.html"},{"title":"41123247-W8","text":"2024 Spring 協同產品設計實習課程教導, w1-w6內容統整 w1-w6內容統整 老師所講的內容統整","tags":"w8","url":"./41123247-w7-blog.html"},{"title":"41123244-W8","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W8網誌 將每個組員各一分鐘的影片報告放到各分組網誌,說明已經完成的個人與團隊分配任務製作結果","tags":"w8","url":"./41123244-W8-blog.html"},{"title":"41123245-W8","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 錄製期中影片 錄製個人倉儲、網站，並推上個人倉儲和分組倉儲","tags":"w8","url":"./41123245-W8-blog.html"},{"title":"41123221-w8","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,錄製期中影片 期中影片 錄製 期中影片 ,介紹至目前的進度.","tags":"w8","url":"./2120240411.html"},{"title":"41123230-W8拍攝個人影片","text":"介紹個人倉儲內容、靜態、網誌及團隊倉儲 完成影片 上傳影片","tags":"w8","url":"./41123230-W8-blog.html"},{"title":"41123230-W7清明連假暫停一次","text":"清明連假暫停一次 清明連假暫停一次 清明連假暫停一次","tags":"w7","url":"./41123230-W7-blog.html"},{"title":"41123244-W7","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W7網誌 協同產品設計實習的第七週, 春節放假","tags":"w7","url":"./41123244-W7-blog.html"},{"title":"41123233-W7","text":"清明節 W1~W6統整 標題、內容整理統整","tags":"w7","url":"./41123233-W7-blog.html"},{"title":"41123221-w7","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,清明節放假 w1~w6統整 將w1~w6的內容統整,並檢查哪裡有錯誤的地方.","tags":"w7","url":"./2120240404.html"},{"title":"41123205-W7","text":"本週清明連假停課一次 本週清明連假 放假休息一週","tags":"w7","url":"./41123205-W7-blog.html"},{"title":"41123244-W6","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W6網誌 教學影片字幕 第五部 第十部","tags":"w6","url":"./41123244-W6-blog.html"},{"title":"41123233-w6","text":"2024 Spring 協同產品設計實習課程教導, 分組網誌的統整、 Github Actions 帶有子模組的 main.yml 設定、更新分組倉儲中的分組倉儲 Github Actions 帶有子模組的 main.yml 設定 我們所寫的內容丟到個人倉儲, 加上我們有把自己的子模組倒入分組倉儲, 加入取子模組內容的 main.yml 設定把我們所寫的內容整合起來. 其中加入取子模組內容的設定為: 範例:2b-midbg4 cd_report.tex 中的範例報告第一章, 取自其組員分組網站中的 latex 目錄, 且圖片檔案也是沿用分組倉儲中的設定, 取自組員 images 目錄. 網誌的統整 如何把每個人的網誌整合到分組倉儲內, 整合前先把每個人子模組所連到的倉儲更新到現在狀態, 再利用 pelicanconf py 整合各組員的網誌. 更新分組倉儲中的分組倉儲 更新分組倉儲中的分組倉儲 cd2024 2b w6 取下子模組, 以及更新學員倉儲內容 先前我們有把每個人的倉儲利用子模組導入組別倉儲, 即使你自己的倉儲有更新內容, 也不會顯示目前更新次數, 如何讓子模組同步就利用 update 更新到最新版本. git submodule update --init cd 學號 git pull origin main cd .. git status git add . git commit -m \"update 學號 子模組\" git push 就完成更新目前的倉儲","tags":"w6","url":"./41123233-W6-blog.html"},{"title":"41123247-W6","text":"2024 Spring 協同產品設計實習課程教導, 分組網誌的統整、 Github Actions 帶有子模組的 main.yml 設定、更新分組倉儲中的分組倉儲. Github Actions 帶有子模組的 main.yml 設定 我們所寫的內容丟到個人倉儲, 加上我們有把自己的子模組倒入分組倉儲, 加入取子模組內容的 main.yml 設定把我們所寫的內容整合起來. 其中加入取子模組內容的設定為: 範例:2b-midbg4 cd_report.tex 中的範例報告第一章, 取自其組員分組網站中的 latex 目錄, 且圖片檔案也是沿用分組倉儲中的設定, 取自組員 images 目錄. 網誌的統整 如何把每個人的網誌整合到分組倉儲內, 整合前先把每個人子模組所連到的倉儲更新到現在狀態, 再利用 pelicanconf py 整合各組員的網誌. 更新分組倉儲中的分組倉儲 cd2024 2a w6 取下子模組, 以及更新學員倉儲內容 先前我們有把每個人的倉儲利用子模組導入組別倉儲, 即使你自己的倉儲有更新內容, 也不會顯示目前更新次數, 如何讓子模組同步就利用 update 更新到最新版本. git submodule update --init cd 學號 git pull origin main cd .. git status git add . git commit -m \"update 學號 子模組\" git push 就完成更新目前的倉儲 此為第六周內容","tags":"w6","url":"./41123247-w6-blog.html"},{"title":"41123245-W6","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 上傳影片 將影片附上字幕並上傳到網站 教學影片分組整理並自評 各組自行搜尋前面已經發布的教學影片, 分別 在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 從影片字幕中整理出逐字稿,放在影片下方,以.txt 連結安排 並在各嵌入的教學影片下方,以摘要方式說明該影片的教學重點","tags":"w6","url":"./41123245-W6-blog.html"},{"title":"41123221-w6","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,說明協同 NX 零組件繪圖以及 CoppeliaSim 場景模擬相關檔案格式. ODOO PLM 論文中英並列任務 每個組員都需要在其個人的 cd2024 倉儲中以 LaTeX 格式完成下列文章的英文與中文翻譯,最後組員需要在分組網站的 Release 或 downloads 區域完成製作 2b-midbgx_report.pdf 若您想在本地環境中使用可攜式程式編譯分組 LaTeX 報告，請下載以下兩個檔案： 1. miktex-portable.7z （大小約 167MB，解壓縮後約 1GB，需要密碼） 2.參考資料： latex_images_github.7z （需要密碼） 這兩個檔案將提供您在本地編譯 LaTeX 文件所需的環境和資源。 CoppeliaSim 檔案格式 請下載 copsim_midterm_cube2_xml.7z 檔案。 1.CoppeliaSim 目前提供二進位與 XML 格式的場景檔案。XML 格式的場景檔案支援單一檔案或多個模型與影像檔案的儲存。 2.從 4.5.1 版本開始，設定資料不再存儲在套件目錄中，而是存放在操作系統的 AppData/Roaming 目錄中。 3.在 4.5.1 版本時，儲存為多 XML 檔案格式時，無法帶出場景中的 png 圖檔，此一問題在 4.6.0 版本之後才得到修正。 4.目前僅修改至 4.5.1 版本的 CoppeliaSim 支援 IPv4 與 IPv6 網際場景模擬。 5.XML 格式的檔案具有廣泛的應用，協同產品設計過程可能需要使用程式方法來處理從零組件與模擬場景互相轉換取得的 XML 格式檔案。 ODOO, NX, Sourcetree, Github and Replit 建立協同產品開發環境的配置需要以下步驟： 1.下載 Siemens NX1872 軟體。cd2024 學生可以選擇在電腦上安裝 NX1872 或者從隨身碟中運行 NX1872。 2.下載 Sourcetree_portable.7z 。這需要密碼才能解壓縮。 3.下載其他工具，包括 CoppeliaSim、SciTE、Portablegit、Putty、Zoomit、Python、Solvespace和Process Explorer等。 4.下載 Solvespace_model_2d_for_cd2024_w6.7z 。 配置重點在於將 NX、Sourcetree 和 CoppeliaSim 的設定檔案與管理分組倉儲的權限存儲至可攜系統。並且需要從可攜系統啟動後的命令列中啟動這些應用程式。","tags":"w6","url":"./2120240328.html"},{"title":"41123230-W6分組任務","text":"完成分配到的影片上字幕 完成並上傳上字幕任務 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w6","url":"./41123230-W6-blog.html"},{"title":"41123205-W6","text":"協同產品設計實習的第六週, 說明協同 NX 零組件繪圖以及 CoppeliaSim 場景模擬相關檔案格式. 教學影片上字幕 依照小組組長分配，各組員將自己所分配到之影片加上字幕和逐字稿，並上傳到個人與小組動態 教學影片一:建立個人課程倉儲與網站 摘要:先進入mde.te網站的CD2024 >> 利用team code(p0961sy)加入teams團隊 >> 先登入github>>再利用https://github.com/mdecycu/cmsimde_site此連結進到cd2024的倉儲template來create一個新的倉儲 名稱打cd2024 >> 按create >> 點settings >> 點pages >> 將none改為main >> 點save 心得:這部影片裡的內容應該是淺顯易懂的，所以應該很容易就做出來了。 教學影片十三:利用 Gitpod 與個人 token 取得分組倉儲改版權限 摘要:先到gitpod >> 將token存在TERMINAL之下 >> 打cd .git和cat config >> 要編輯要先更換目錄到git之下 >> Vi config >> 是利用KJHL控制程式編碼位置 >> 不須使用後要到gitpod關掉才不會浪費時數 心得:gitpod這裡我看了很久但還是不知道怎麼進去的，之後再去詢問同學了。","tags":"w6","url":"./41123205-W6-blog.html"},{"title":"41123244-W5","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W5網誌 英文翻譯 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作 影片字幕 1.在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 2.從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 3.並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點","tags":"w5","url":"./41123244-W5-blog.html"},{"title":"41123233-w5","text":"2024 Spring 協同產品設計實習課程教導, 教學內容為先前影片整理、分組網誌的統整. 影片整理 教學影片分組整理並自評: * 在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 * 從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 * 並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點 * 需再加上自評 如何統整組員子模組中的協同設計網誌 每人每週的協同設計網誌文章放在個別的 cd2024 倉儲的 markdown 目錄中, 只要修改分組倉儲中的 pelicalconf.py, 使用 Pelican 設定中的 PATH 與 OUTPUT_PATH 變數, 指定網誌統整目錄, 就可以在分組倉儲中納入所有組員在子模組中所編寫的協同網誌. 實際的設定操作 pelicanconf_py.txt, 是利用 pelicanconf.py 中的程式設定段, 將子模組中 markdown 目錄的 .md 動態複製到分組倉儲中的 combined_directory, 並避開分組倉儲與學員子模組倉儲中的 pages 目錄下的 .md 檔案後, 再進行網誌轉檔, 並且所產生的網誌超文件將存入所設定的 blog 目錄. 完成設定後的網誌轉檔指令為: pelican -s local_publishconf.py 表利用 local_publishconf.py 的設定進行轉檔, 且先前有關 pelicanconf.py 的設定也將導入執行 過程中, 各組員必須將個別的網誌 .md 檔案名稱前加上字串(不然資料會亂), 例如: \"學號_\" 加上獨一無二的網誌 Slug 字串名稱, 且 Category 使用學號作為標示. 之後各組統整轉檔時, 才不至於發生相同網誌文章檔案名稱衝突的錯誤, 且從各分組網誌的 Categories 中即可找到各組員所編寫的所有網誌內容 利用 NX1872 協同繪製零組件 老師所提供 NX 套件目錄檔案, 之後將 NX1872 目錄存入隨身碟後, 可利用下列 start_USB_nx1872.bat 啟動. (電腦輔助設計室中 C: 安裝 NX1872, D: 則配置 NX2206 與 NX12)","tags":"w5","url":"./41123233-W5-blog.html"},{"title":"41123247-W5","text":"這週為課堂影片講解上字幕，組長依序分配每個成員所需要完成的影片及逐字稿，並上傳至YouTube，且在動態上打出摘要且心得。 上字幕 w5 2b 分組任務 請各組自行搜尋前面已經發布的教學影片, 分別在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點","tags":"w5","url":"./41123247-w5-blog.html"},{"title":"41123245-W5","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 整理影片字幕","tags":"w5","url":"./41123245-W5-blog.html"},{"title":"41123221-w5","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,教學內容為先前影片整理、分組網誌的統整. 影片整理 各組需要對教學影片進行整理並進行自我評估。具體步驟如下： 1.將字幕嵌入到影片上,並上傳到組別網站的平台上。 2.從影片字幕中整理出逐字稿,並以 .txt 格式提供連結，放置在影片下方。 3.在各嵌入的教學影片下方,以摘要方式說明該影片的教學重點。 4.進行自我評估,對教學影片的內容、呈現方式以及對觀眾的吸引力進行評估,並提出改進意見和建議。 如何統整組員子模組中的協同設計網誌 每位組員每週撰寫的協同設計網誌文章都會存放在個別的 cd2024 倉儲的 markdown 目錄中。只要修改分組倉儲中的 pelicanconf.py 檔案,使用 Pelican 設定中的 PATH 與 OUTPUT_PATH 變數,指定網誌統整目錄,就可以將所有組員在子模組中編寫的協同網誌納入分組倉儲中. 具體的設定操作是透過 pelicanconf.py 中的程式碼段,將子模組中 markdown 目錄中的 .md 檔案動態複製到分組倉儲中的 combined_directory,同時避開分組倉儲與組員子模組倉儲中 pages 目錄下的 .md 檔案。接著進行網誌轉檔,並將產生的網誌超文件存放到所設定的 blog 目錄中。完成設定後,執行網誌轉檔指令 pelican -s local_publishconf.py,利用 local_publishconf.py 的設定進行轉檔,同時將之前 pelicanconf.py 的設定也導入執行. 在這個過程中,每位組員必須在個別網誌 .md 檔案名稱前加上一串獨一無二的網誌 Slug 字串,例如：\"學號_\"，以避免檔案名稱衝突。此外,組員的 Category 欄位使用學號作為標示。這樣一來,在統整轉檔時,就不會發生相同網誌文章檔案名稱衝突的錯誤,而且可以從各分組網誌的 Categories 中找到每位組員所編寫的所有網誌內容. 利用 NX1872 協同繪製零組件 老師提供了一個 NX 套件的目錄檔案，其中包含了 NX1872 目錄。如果將這個 NX1872 目錄存入隨身碟中，可以使用下面的 start_USB_nx1872.bat 檔案來啟動 NX 軟體.(電腦輔助設計室中 C: 磁碟槽安裝了 NX1872, D: 磁碟槽則配置了 NX2206 與 NX12，需要確保在啟動 NX 軟體時選擇正確的目錄和版本)","tags":"w5","url":"./2120240321.html"},{"title":"41123205-W5","text":"協同產品設計實習的第五週, 教學內容為先前影片整理、分組網誌的統整與 NX 零組件繪圖. 新增P65-P75頁翻譯翻譯 被組長分配到翻譯P65-P75頁並翻譯完成，再將整組成員的檔案統整後上傳","tags":"w5","url":"./41123205-W5-blog.html"},{"title":"41123230-W5老師新增影片上字幕作業","text":"老師新增影片上字幕作業 新增翻譯作業1-11頁","tags":"w5","url":"./41123230-W5-blog.html"},{"title":"2024 Spring w5課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 指定影片加註任務 cd2024 2b w4 如何上傳 LaTeX 範例檔案並利用 Actions 在線上編譯出 cd2024 2b w3 latex 轉期中報告","tags":"w5","url":"./41123248-w5-blog.html"},{"title":"41123244-W4","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W4網誌 翻譯英文文章 各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯 https://drive.google.com/file/d/133cx9jAbXbfPkH7bjWBcj-J2x1Dfg0Q3/view?usp=sharing","tags":"w4","url":"./41123244-W4-blog.html"},{"title":"41123233-w4","text":"2024 Spring 協同產品設計實習課程教導, 各分組需要明確界定任務需求與分工時序, 隨著各組協同設計流程的進行, 分組倉儲與網站的改版越發複雜, 此時可導入 SourceTree 協助各組員更清楚看到倉儲改版歷程, 與本週分組作業 分組任務 教學影片分組整理並自評: * 在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 * 從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 * 並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點 Github 個人與分組倉儲的維護方式 個人的倉儲名稱為 cd2024, 而期中的分組倉儲位於 mdecd2024 帳號下, 以2a 開頭, 加上 \"-\" 之後再補上 midag + 組別, 且各組員的 cd2024 個人倉儲必須設為各分組倉儲的子模組, 目的在各組員可以自行管理並維護自己的課程倉儲, 並決定要引入分組倉儲的內容版次. * 方法一 - Replit * 方法二 - Codespaces * 方法三 - Gitpod * 方法四 - localhost","tags":"w4","url":"./41123233-W4-blog.html"},{"title":"41123247-W4","text":"2024 Spring 協同產品設計實習課程教導, 各分組需要明確界定任務需求與分工時序, 隨著各組協同設計流程的進行, 分組倉儲與網站的改版越發複雜, 此時可導入 SourceTree 協助各組員更清楚看到倉儲改版歷程, 與本週分組作業. 分組任務 教學影片分組整理並自評: * 在影片上填上字幕, 另行上傳到可以嵌入到各分組的網站上 * 從影片字幕中整理出逐字稿, 放在影片下方, 以 .txt 連結安排 * 並在各嵌入的教學影片下方, 以摘要方式說明該影片的教學重點 Github 個人與分組倉儲的維護方式 個人的倉儲名稱為 cd2024, 而期中的分組倉儲位於 mdecd2024 帳號下, 以2a 開頭, 加上 \"-\" 之後再補上 midag + 組別, 且各組員的 cd2024 個人倉儲必須設為各分組倉儲的子模組, 目的在各組員可以自行管理並維護自己的課程倉儲, 並決定要引入分組倉儲的內容版次. * 方法一 - Replit * 方法二 - Codespaces * 方法三 - Gitpod * 方法四 - localhost 此為第四周內容","tags":"w4","url":"./41123247-w4-blog.html"},{"title":"41123245-W4","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 翻譯英文簡報內容","tags":"w4","url":"./41123245-W4-blog.html"},{"title":"41123205-W4","text":"協同產品設計實習的第四週, 各分組需要明確界定任務需求與分工時序, 隨著各組協同設計流程的進行, 分組倉儲與網站的改版越發複雜, 此時若導入 Source Tree 協助各組員更清楚看到倉儲改版架構, 另外 Git Branch 的應用. 在小組動態新增翻譯作業 在小組動態創建翻譯作業並上傳","tags":"w4","url":"./41123205-W4-blog.html"},{"title":"41123221-w4","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,在協同設計流程中,每個分組都需要明確定義任務需求和分工時序。隨著流程的進行,分組倉儲和網站的修改變得越來越複雜。為了讓各組員更清楚地看到倉儲的改版歷程以及本週的分組作業，導入 SourceTree 可以幫助團隊成員更輕鬆地管理和追蹤倉儲的修改,並更有效地協作. 分組任務 各組需要對教學影片進行整理並自我評估。這包括以下步驟： 1.在影片上添加字幕,並將其另存為可以嵌入到各組網站的格式。 2.從影片字幕中整理出逐字稿,並以 .txt 格式提供連結。 3.在各組嵌入的教學影片下方,提供影片的教學重點摘要。 這樣做可以更容易理解影片的內容，並提供方便的資源供參考。 Github 個人與分組倉儲的維護方式 各組成員的個人倉庫名稱為「cd2024」,而期中分組倉庫位於「mdecd2024」帳號下。分組倉庫的命名格式為以「2b」開頭，後接「-」,再加上「midag」以及組別號碼。每位組員的「cd2024」個人倉庫都必須被設定為相對應分組倉庫的子模組,這樣各組員便能夠獨立管理和維護自己的課程倉庫,同時可以自行決定是否要導入分組倉庫的內容版本。可使用以下四種方法之一進行操作：Replit、Codespaces、Gitpod 或本地主機（localhost）.","tags":"w4","url":"./2120240314.html"},{"title":"41123230-W4Odoo翻譯作業","text":"Odoo翻譯作業 老師增加翻譯作業 組長分配翻譯工作1-11頁","tags":"w4","url":"./41123230-W4-blog.html"},{"title":"2024 Spring w4課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 翻譯 上傳 LaTeX","tags":"w4","url":"./41123248-w4-blog.html"},{"title":"41123244-W3","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W3網誌 將組員的個人倉儲納入分組倉儲成為子模組 將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站, 設定的指令為: git submodule add 組員的個人倉儲網址 組員的學號， 一旦分組倉儲帶有以各組員學號作為子模組之後, git clone 倉儲必須使用: git clone --recurse-submodules 加上各組的倉儲 URL","tags":"w3","url":"./41123244-W3-blog.html"},{"title":"41123233-w3","text":"這週為英文文章翻譯,使用CHATGPT來進行文章翻譯,組長來分配每個人所負責的頁數,我所分配到頁數是21~31 子模組 如何利用 Github Codespaces 建立, cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站. 先 git submodule add 自己的倉儲空格學號, git add . , git commit -m \"add 學號 submodule\" , 最後在 git push . 期中報告 由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2a-midbgx_report.pdf 的製作.","tags":"w3","url":"./41123233-W3-blog.html"},{"title":"41123245-W3","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 列出期中分組倉儲與網站 將組員的個人倉儲設為分組倉儲子模組 cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站, 設定的指令為: git submodule add 組員的個人倉儲網址 組員的學號 例如: 假設組員的 cd2024 個人倉儲位於: https://github.com/scrum-1/cd2024, 且該組員的學號為 41123299, 則該組員必須在進入該組的倉儲目錄後, 執行: git submodule add https://github.com/scrum-1/cd2024.git 41123299 如此, Github 帳號為 scrum-1 的組員, 其個人倉儲就會設定為分組倉儲的子模組, 而且是以其學號命名此一子模組的目錄名稱. 這樣設定的好處是: 各組員可以自行管理個人的課程倉儲與網站, 也就是位於其 Github 帳號下的 cd2024, 並且自行決定要整合到分組倉儲與網站的版本. 也能將自己在課程網站的資料, 直接用連結導入分組網站, 無需額外將資料搬進分組倉儲. 另外一個使用 Github Classroom 派送分組倉儲的好處, 是 mdecycu 自動成為各分組倉儲的管理者之一, 若各組在改版或解決衝突的過程發生問題, mdecycu 可以協助處理. 一旦分組倉儲帶有以各組員學號作為子模組之後, git clone 倉儲必須使用: git clone --recurse-submodules 加上各組的倉儲 URL 以第一組期中分組倉儲的 git clone 為例, 並且使用 putty session 名稱 github.com: git clone --recurse-submodules git@github.com:mdecd2024/2b-midbg1.git 而且若要在分組倉儲中更新各組員的子模組版本, 則必須更換目錄到該組員的學號目錄中並且使用 git pull origin main, 才能取下該組員其 cd2024 個人倉儲的最新內容. 取下組員資料後, 若要新增提交推送, 則必須再更換目錄回分組倉儲後才能執行.","tags":"w3","url":"./41123245-W3-blog.html"},{"title":"41123247-W3","text":"2024 Spring 協同產品設計實習課程教導, 主要說明如何善用 Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作. 子模組 如何利用 Github Codespaces 建立, cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站. 先 git submodule add 自己的倉儲空格學號, git add . , git commit -m \"add 學號 submodule\" , 最後在 git push. 期中報告 由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2a-midbgx_report.pdf 的製作. 此為第三周內容","tags":"w3","url":"./41123247-w3-blog.html"},{"title":"41123205-W3","text":"2024 Spring 協同產品設計實習的第三週, 主要說明如何善用 Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作. 建立子模組 將自己的倉儲設為小組倉儲的子模組","tags":"w3","url":"./41123205-W3-blog.html"},{"title":"41123221-w3","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引,這一週的主要目標是有效地利用 Github Codespaces 與 Gitpod,並且將組員的倉儲設定為分組倉儲的子模組。同時也引入 LaTeX 轉換為 PDF 的機制,為期中分組報告的製作做好準備. 子模組 使用 Github Codespaces 建立與管理您的課程倉儲。在課程倉儲中,透過以下步驟將各組員的個人網站作為 submodule 納入分組倉儲： 1.首先,使用 git submodule add 命令將組員的個人網站作為 submodule 加入到您的分組倉儲中。例如：git submodule add <組員個人網站的 URL> <組員學號> 2.然後,執行 git add . 將變更加入暫存區。 3.接著,使用 git commit -m \"add 學號 submodule\" 提交變更。 4.最後,使用 git push 將變更推送到遠端倉儲中。 這樣一來,分組倉儲就會包含各組員的個人網站作為 submodule，並且能夠在 Github Codespaces 中方便地進行管理和編輯。 有關 Codespaces 使用 考慮到 Github Codespaces 免費帳戶每月只有 120 個小時的限制,使用者可以在需要時選擇在 Github 倉儲中編輯 Markdown 目錄中的網誌文章。當需要使用 Pelican 轉換檔案或編輯 config/content.htm 以及轉換靜態網頁內容時,才啟動 Codespaces。這樣可以最大程度地優化 Codespaces 免費核心小時的使用. 期中報告 由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作.","tags":"w3","url":"./2120240307.html"},{"title":"41123230-W3建立2b-midag7 的子模組, 且以各組員的學號作為子模組的名稱","text":"建立2b-midag7 的子模組, 且以各組員的學號作為子模組的名稱 建立2b-midag7 的子模組, 且以各組員的學號作為子模組的名稱","tags":"w3","url":"./41123230-W3-blog.html"},{"title":"2024 Spring w2課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 個人倉儲 分組","tags":"w2","url":"./41123248-w2-blog.html"},{"title":"2024 Spring w3課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 分組網站 利用 Gidpod 維護分組網站","tags":"w3","url":"./41123248-w3-blog.html"},{"title":"41123205-W2","text":"2024 Spring 協同產品設計實習的第二週, 主要利用 Github Classroom 進行分組, 並且說明如何利用 Github Codespaces 維護個人與分組網站. 創立小組 自行找好組員並將組員整合到統一倉儲內","tags":"w2","url":"./41123205-W2-blog.html"},{"title":"41123233-w2","text":"2024 Spring 協同產品設計實習課程教導, 主要利用 Github Classroom 進行協同分組, 並引導學員除了 Replit, 可以利用 Github Codespaces 維護個人或分組網站內容. 利用 Github Classroom 指定分組倉儲 分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 建立新 replit 先點 Create a Repl 再點 Import from GitHub 利用 From URL 把組別倉儲連結丟進來 (利用這個 My Repositories 是找不到的) , 選取 Python 語言, 按下 Import from GitHub 成功建立, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰 (每個人都要建立一個才有權限) 送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH (git@github.com:自己的帳號/cd2024.git) , 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版權限, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案. 利用 Codespaces 維護倉儲與網站 利用 init_replit 指令安裝所需 Python 模組 啟動動態 指令 1.chmod u+x init_replit 2. ./init_replit 3. Python3 main.py 靜態 指令 Python3 -m http.server Push 指令 1.git add . 2. git commit -m \" add+你要推的內容 \" 3. git push","tags":"w2","url":"./41123233-W2-blog.html"},{"title":"41123247-W2","text":"2024 Spring 協同產品設計實習課程教導, 主要利用 Github Classroom 進行協同分組, 並引導學員除了 Replit, 可以利用 Github Codespaces 維護個人或分組網站內容. 利用 Github Classroom 指定分組倉儲 分組網站從 Github Classroom 執行配置, 因此該倉儲位於 mdecd2024 帳號下, 雖然各組組員具備對此分組倉儲改版的權限, 但是若將分組倉儲 import 到 Replit, 因為其倉儲擁有者為 mdecd2024, 因此無法從 Replit accoount 項下進行授權, 建立新 replit 先點 Create a Repl 再點 Import from GitHub 利用 From URL 把組別倉儲連結丟進來 (利用這個 My Repositories 是找不到的) , 選取 Python 語言, 按下 Import from GitHub 成功建立, 但是可以利用 ssh-keygen 建立 .ssh 目錄下的 id_rsa 與 id_rsa.pub, 之後除了將公鑰 (每個人都要建立一個才有權限) 送到 Github 之外, 還需要在 .ssh 目錄中建立 config, 且將倉儲 .git/config 中的 https 協定改為 SSH (git@github.com:自己的帳號/cd2024.git) , 可以在 Replit 中以 SSH 模式取得對 Github 帳號下特定倉儲的改版權限, 只不過 Replit 的免費帳號環境會不定時刪除 /home/runner/.ssh 目錄中的授權資料, 因此若要使用 Replit 維護從 Github Classroom 取得授權的分組倉儲, 必須使用程式方法配置 .ssh 中的 id_rsa 與 config 檔案. 利用 Codespaces 維護倉儲與網站 利用 init_replit 指令安裝所需 Python 模組 啟動動態 指令 1.chmod u+x init_replit 2. ./init_replit 3. Python3 main.py 靜態 指令 Python3 -m http.server Push 指令 1.git add . 2. git commit -m \" add+你要推的內容 \" 3. git push 此為第二周內容","tags":"w2","url":"./41123247-w2-blog.html"},{"title":"41123244-W2","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W2網誌 1.Github Classroom 指定分組倉儲 乙班期中分組作業名稱 2b，組長必須建立組別名稱為 midag1,midag2, midag3 依此類推 .... 2.設定網誌 進入Replit左側的目錄找到markdown，點選Add file新增網誌， 完成後點選 Shell 輸入./gen_blog，再到 Git 上傳即可","tags":"w2","url":"./41123244-W2-blog.html"},{"title":"41123245-W2","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 利用 Github Classroom 指定分組倉儲","tags":"w2","url":"./41123245-W2-blog.html"},{"title":"41123221-w2","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引，將使用 Github Classroom 進行協同分組。除了 Replit 之外，我們還將引導學員使用 Github Codespaces 來維護個人或分組的網站內容. 利用 Github Classroom 指定分組倉儲 在使用 Github Classroom 指定分組倉庫時，倉庫位於 mdecd2024 帳戶下。雖然每個組員對該分組倉庫有修改權限，但在將分組倉庫導入 Replit 時，由於倉庫擁有者是 mdecd2024，因此無法在 Replit 帳戶下進行授權。解決這個問題的方法是創建一個新的 Replit，點擊 \"Create a Repl\"，然後選擇 \"Import from GitHub\"，使用 \"From URL\" 將組別倉庫的連結輸入。然後選擇 Python 語言，點擊 \"Import from GitHub\" 來成功建立。接下來，您可以使用 ssh-keygen 命令在 .ssh 目錄下創建 id_rsa 和 id_rsa.pub。每個人都需要建立一個並將公鑰添加到其 GitHub 帳戶中。然後，您需要在 .ssh 目錄中創建 config 文件，將倉庫的 .git/config 中的 https 協議改為 SSH（git@github.com:your_account/cd2024.git）。通過這樣的配置，您可以在 Replit 中以 SSH 模式獲取對 GitHub 帳戶下特定倉庫的修改權限。但是，由於 Replit 的免費帳戶環境會不定期刪除 /home/runner/.ssh 目錄中的授權資料，因此如果要使用 Replit 維護從 GitHub Classroom 獲取授權的分組倉庫，就需要使用程式方法來配置 .ssh 中的 id_rsa 和 config 文件. 利用 Codespaces 維護倉儲與網站 安裝所需的 Python 模組使用 init_replit 指令。 動態指令： 1.使用 chmod u+x init_replit 設置權限。 2.執行 ./init_replit。 3.啟動程式，使用 Python3 main.py。 靜態指令： 1.使用 Python3 -m http.server。 推送指令： 1.加入所有變更，使用 git add .。 2.做出提交，使用 git commit -m \"新增: 你要推送的內容\"。 3.推送至遠端儲存庫，使用 git push。","tags":"w2","url":"./2120240229.html"},{"title":"41123230-W2組長建立各組倉儲","text":"組長建立各組倉儲 組長建立各組倉儲 加入2b-midag7","tags":"w2","url":"./41123230-W2-blog.html"},{"title":"41123205-W1","text":"2024 Spring 協同產品設計實習的教學主要介紹 OnShape、Coppeliasim 與 Odoo PLM 在機械設計流程中的應用. 創立倉儲 建立個人倉儲 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./41123205-W1-blog.html"},{"title":"41123244-W1","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. W1網誌 1.建個人課程倉儲 登入 github 連結到 https://github.com/mdecycu/cmsimde_site, 利用此倉儲作為 Template, 新增一個名稱為 cd2024 的倉儲, 並且將其 main 分支設為網頁根目錄 2.將個人倉儲 import 至 Replit 從 Replit 帳號下方的 Account, Connected Services(連線服務區) 點選 Connect 後, 讓 Github 授權 Replit, 將在 Replit 中的倉儲改版後, 有權限推回 Github 3.設定 Github 帳號的雙重認證 手機必須先安裝 Github Mobile，在 Github 帳號下的 Setting 中的啟用雙重認證，下次登陸時須使用驗證碼","tags":"w1","url":"./41123244-W1-blog.html"},{"title":"41123233-w1","text":"2024 Spring 協同產品設計實習課程教導, 如何建立倉儲和利用 import 至 Replit進行改版、設定網誌與Odoo PLM 在機械設計流程中的應用. 建立個人課程倉儲 登入到自己的github, 連結到[https://github.com/mdecycu/cmsimde_site] (Teams也有貼) , 再利用 Template (連結點進去右上角) 作為倉儲, 打上 cd2024 為名稱, 進去後到設定裡的 pages 把 main 分支設為網頁根目錄靜態就跑出來了. 如何將倉儲 import 至 Replit 由 Replit 帳號下的設定, 底下有個 Connected Services(連線服務) 點選 Connect 後 (有連結過會出現 Disconnect ) , 讓 Github 授權給 Replit 可在 Replit 中進行改版, 改版後就有權限推回自己的網站. 內容管理系統 使用者可以自行利用 [cmsimde_site] 倉儲作為 Template, 建立自己的網站內容管理系統. import 完如何進行改版 import 完會有 Webview 跑出來這就是自己的動態網站 (由這可增加或修改內容) , 點進去後打 admin 就可增加 (也就是改版) 你所要的內容, 當你打完你要的內容後右上角有個 Convert 點一下轉為靜態 (這要點, 不然你從動態推到靜態會沒有東西) , 到 Replit 的 Git 中輸入新增的內容後 Push , 等待一下就可以在靜態看到剛剛增加的內容. 建立網誌 我們所使用的網誌系統 (Pelican) , markdown 目錄是一個原始檔 (撰寫網誌範本) , 新增完的內容轉換後會位於在 blog 下的目錄. 將 markdown 網誌轉為網誌的指令為: pelican markdown -o blog -s local_publishconf.py 表示使用了 local_publishconfig.py 設定, 其餘與 blog 有關設定檔有: pelicanconf.py (更改網誌名稱) 與 publishconf.py (增加靜態連結) 等, 在設定網誌同時要依據自己的 github 帳號對上述三個.py 去做設定動作. Odoo PLM 功能 畢竟這個程式這學期才用, 當然帳號是以學號加上 nfu.edu.tw 去建立的, 期中和期末個做一樣模擬出來, 要新增一個產品網頁 (已建立) , 依模擬產品去分配給組員做 (會收到 emlig 的訊息) 回傳至 odoo PLM 裡 以上為第一周內容","tags":"w1","url":"./41123233-W1-blog.html"},{"title":"41123245-W1","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 建立個人倉儲 登入 github.com, 連結到 https://github.com/mdecycu/cmsimde_site, 利用此倉儲作為 Template, 新增一個名稱為 cd2024 的倉儲, 並且將其 main 分支設為網頁根目錄. https://github.com/mdecycu/cmsimde_site 與https://github.com/mdecycu/cmsite 的差別為, 目前的Template將cmsimde當作目錄, 而非cmsite中的子模組. 將個人倉儲import至Replit從Replit帳號下方的Account,ConnectedServices(連線服務區) 點選Connect後,讓Github授權Replit,將在Replit中的倉儲改版後,有權限推回 Github. 設定Replit與Github應用授權的說明影片 在ReplitEditor(編輯器中)使用Ctrl + z執行undo 在ReplitEditor(編輯器中)使用Ctrl + y執行redo 設定 Github 帳號的雙重認證 說明如何設定Github雙重認證,其中手機必須先安裝 Github Mobile,也可以使用Authy App作為認證套件,一旦在Github帳號下的Setting 中的 Password and authentication啟用雙重認證,最後必須下載對應的Recovery codes並存入隨身碟,而且要寄到個人的電子郵箱.","tags":"w1","url":"./41123245-W1-blog.html"},{"title":"41123221-w1","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引，首先建立倉儲，再以Replit進行修改，接著在Replit建立網誌，記錄每周的進度，應用Odoo PLM管理機械設計流程. 創建個人課程倉儲 登入至自己的 GitHub 帳號後，點擊此連結[ https://github.com/mdecycu/cmsimde_site ]，或者在Teams中找到此連結。使用Template建立一個新倉儲，並命名為\"cd2024\"。在倉儲設定中的 pages 設定中，將 main 分支設為網頁根目錄，這樣網頁就能正常運行了. 將倉儲 import 至 Replit 在Replit帳號的設定中，找到Connected Services(連線服務)並連接GitHub，這樣就可以在Replit中進行改版，並且有權限將修改後的內容推回自己的網站. import 完如何進行改版 import完成後，動態網站就會顯示出來。點擊進入後，輸入\"admin\"就可以輕鬆增加或修改想要的內容，完成後，在右上角點擊\"Convert\"將內容轉為靜態。然後，在Replit的Git中提交新增的內容，然後Push，稍等片刻後，就可以在靜態網站上看到剛剛新增的內容. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./2120240222.html"},{"title":"41123247-W1","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./41123247-w1-blog.html"},{"title":"41123230-W1建立個人倉儲","text":"./ 建立個人倉儲 建立個人倉儲","tags":"w1","url":"./41123230-W1-blog.html"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./2024-Spring-w1-blog-tutorial.html"},{"title":"41123244-W0","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w0","url":"./41123244-W0-blog.html"},{"title":"41123245-W0","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w0","url":"./41123245-W0-blog.html"},{"title":"2024 Spring w1課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./41123248-w1-blog.html"}]};