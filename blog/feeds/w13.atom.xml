<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協統產品設計bg7 - w13</title><link href="./" rel="alternate"></link><link href="./feeds/w13.atom.xml" rel="self"></link><id>./</id><updated>2024-05-23T05:17:44+08:00</updated><entry><title>41123205-W13</title><link href="./41123205-W13-blog.html" rel="alternate"></link><published>2024-05-16T19:18:00+08:00</published><updated>2024-05-23T05:17:44+08:00</updated><author><name>41123205</name></author><id>tag:None,2024-05-16:./41123205-W13-blog.html</id><summary type="html">&lt;p&gt;確認進度&lt;/p&gt;
</summary><content type="html">&lt;p&gt;確認進度&lt;/p&gt;


&lt;h1&gt;各週指定任務&lt;/h1&gt;
&lt;p&gt;個人 cd2024 與分組倉儲的建立及維護.
各分組註冊一個 Odoo 帳號, 選用免費的 PLM 模組, 取得各分組的產品生命週期管理系統網域, 並將參考論文的協同翻譯流程作為工作項目, 在各分組的 PLM 網域系統中留下任務分配與紀錄, 最終產出為一份參考論文的中英文翻譯並列 pdf 檔案, 其中包含各組員的心得報告.
指定在參考論文的翻譯與閱讀過程, 將各組員的 cd2024 課程倉儲納為分組倉儲的子模組, 可以將各組員倉儲中的 LaTeX 原始資料, 整合至分組倉儲中, 採 Github Actions 或近端使用 MikTeX 建立分組的參考論文閱讀報告 pdf 檔案(教學).
要求各分組採協同方式, 在各教學影片上填上字幕並嵌入個人網站, 分工整理影片逐字稿與教學重點, 最後完成期中自評, 在期中考週將自評成績送至教務處.
要求下載 Siemens NX 1872 至個人隨身碟或電腦 (含筆電), 後續專案系統的零組件繪圖可採電腦輔助設計室固態硬碟所安裝的 NX1872 或隨身碟中的可攜系統, 必須透過連網取得認證後才能開啟.
提醒 CoppeliaSim 不同版本中存檔上的差異, 並強調 cd2024 將沿用 cad2023 課程中所使用的 4.5.1 版.
提示 各分組可以利用可攜式 Sourcetree 套件, 在近端充分了解個人倉儲與分組倉儲的各種改版或解決衝突議題.
在第七週摘要出 cd2024 各項分組協同模式的要點及執行方法.
在第八週說明如何應用 AI 協助先前閱讀論文, 整理資料以及延伸模擬程式的方法, 並提出既存鋼球平衡台控制與模擬的實習步驟.
第十週起, 要求學員完成三項實習任務. (建立倉儲與網站連結、PID 控制文獻整理、NX 平台零組件繪圖)
第十二週的三項實習任務 (NXOpen 零組件繪製、分組倉儲設為評分倉儲子模組、足球機器人場景模擬).&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>41123244-W13</title><link href="./41123244-W13-blog.html" rel="alternate"></link><published>2024-05-16T15:50:00+08:00</published><updated>2024-05-23T05:17:44+08:00</updated><author><name>41123244</name></author><id>tag:None,2024-05-16:./41123244-W13-blog.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;W13網誌&lt;/h1&gt;
&lt;h2&gt;鋼球平衡台零組件上傳&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1uMcI7wYN-53kI33B1OQI7fz3NrxNWPUY/view"&gt;零件檔&lt;/a&gt;
&lt;a href="https://drive.google.com/file/d/1c4QQdb0oZAAdjw1fSyJY9ESI4zHbY_yk/view"&gt;過程檔&lt;/a&gt;&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程 W13</title><link href="./41123233-W16-blog.html" rel="alternate"></link><published>2024-05-16T15:00:00+08:00</published><updated>2024-05-23T05:17:44+08:00</updated><author><name>41123233</name></author><id>tag:None,2024-05-16:./41123233-W16-blog.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;任務1&lt;/h1&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>41123247-W13</title><link href="./41123247-w13-blog.html" rel="alternate"></link><published>2024-04-25T15:00:00+08:00</published><updated>2024-05-23T05:17:44+08:00</updated><author><name>41123247</name></author><id>tag:None,2024-04-25:./41123247-w13-blog.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;任務1&lt;/h1&gt;
&lt;pre class="brush: python"&gt;
from browser import window, ajax

def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdecd2024.github.io/2bstud-2bsite/downloads/2b.txt"

  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text

      # 依照換行符號拆分資料
      lines = content.split('\n')

      # 建立空列表儲存資料
      data = []

      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue

        # 依照逗號拆分資料
        items = line.split(',')

        # 將拆分後的資料加入列表
        data.append(items)

      # 印出結果
      print(data)
    else:
      print("Error:", req.text)

  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()

# 呼叫函式讀取 CSV 資料
fetch_csv_data()
&lt;/pre&gt;
&lt;p&gt;只要透過 for 重複迴圈, 就可以從上列資料中每位學員的基本資料 (學號、Github 帳號與組別) 中直接在網頁建立所需的 html.&lt;/p&gt;
&lt;p&gt;並列出-學員倉儲連結/學員網站連結/2a 分組倉儲連結 template: https://github.com/mdecd2024/2a-midag組別&lt;/p&gt;
&lt;p&gt;下列程式碼是加上了生成 HTML 元素的程式碼，以及學員倉庫連結和網站連結的模板：&lt;/p&gt;
&lt;pre class="brush: python"&gt;
  from browser import window, ajax, document, html

  def fetch_csv_data():
    # CSV 檔案網址
    url = "https://mdecd2024.github.io/2astud-2asite/downloads/2a.txt"

    def on_complete(req):
      if req.status == 200 or req.status == 0:
        # 讀取 CSV 檔案內容
        content = req.text

        # 依照換行符號拆分資料
        lines = content.split('\n')

        # 建立空列表儲存資料
        data = []

        # 遍歷每一行資料
        for line in lines:
          # 忽略空白行
          if line.strip() == "":
            continue

          # 依照逗號拆分資料
          items = line.split(',')

          # 將拆分後的資料加入列表
          data.append(items)

        # 印出結果
        print(data)

        # 生成 HTML 元素
        generate_html(data)
      else:
        print("Error:", req.text)

    # 發送 AJAX 請求
    req = ajax.ajax()
    req.bind('complete', on_complete)
    req.open('GET', url, True)
    req.set_header('content-type', 'application/x-www-form-urlencoded')
    req.send()

  # 生成 HTML 元素
  def generate_html(data):
    brython_div = document["brython_div1"]
    course_title = "cd2024"
    for student_id, github_username, group in data:
      # 如果GitHub用戶名為空，將其設置為"000"
      github_username = github_username if github_username else "000"
      # 創建網址和倉庫的鏈接
      site_url = f"https://{github_username}.github.io/{course_title}"
      repo_url = f"https://github.com/{github_username}/{course_title}"
      group_repo_url = f"https://github.com/mdecd2024/2a-midag{group}"
      # 生成HTML元素並插入到div中
      brython_div &lt;= html.A(student_id, href=site_url) + " | " + \
                     html.A("GitHub Repo", href=repo_url) + " | " + \
                     html.A("Group Repo", href=group_repo_url) + html.BR()

  # 呼叫函式讀取 CSV 資料
  fetch_csv_data()
&lt;/pre&gt;
&lt;h1&gt;任務2&lt;/h1&gt;
&lt;p&gt;文章一 : Construction and theoretical study of a ball balancing platform (構建一個球體平衡平台涉及到平台本身的物理結構建造以及用於維持球體平衡的控制算法的理論研究)&lt;/p&gt;
&lt;p&gt;摘要內容 : 通過實施自動控制理論穩定動態系統時的局限性, 球平衡平臺的構造和理論研究, 通過實施穩定動態系統時的局限性自動控制理論. 通過物理構造的裝置作為理論的演示者, 進一步比較從牛頓力學得出的事實物理和計算機模擬結果. 為了能夠進行比較, 有必要設計一個能夠滿足系統要求的令人滿意的控制器. 在設備和控制方面, 為在平臺上平衡球的系統引入比例積分導數控制器. 進一步允許分析以確定穩定自然不穩定或半穩定系統時的局限性. 建立球體平衡平台的理論模型, 並與實際搭建的平台進行比較. 分析理論與實際結果之間的差異, 探討控制理論與系統實施的挑戰.&lt;/p&gt;
&lt;p&gt;文章二 : A real time control system for balancing a ball on a platform with FPGA parallel implementation (用於在平臺上平衡球的即時控制系統，具有FPGA並行實現)&lt;/p&gt;
&lt;p&gt;摘要內容 : 在一個FPGA晶元上開發了兩個並行PID控制器，用於獨立控制一個物件的兩個參數。確保了控制物件的PID控制器的輪廓計算的並行處理，調節器的輸出已經歸一化。通過自然類比，提高了在平台上調節球位置的精度。設計的控制器可用於即時控制具有許多受控參數的高速物體。&lt;/p&gt;
&lt;p&gt;文章三 : Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach (基於狀態空間方法的雙軸平臺球位控制模擬與實驗研究)&lt;/p&gt;
&lt;p&gt;摘要內容 : 本研究詳細設計並比較了三種控制結構，用於自動穩定球在板上的位置和球的軌跡跟蹤。即PD控制器、狀態空間反饋和狀態空間觀測器。所有三種方法都經過設計並進行了實際比較。所有結構都有一個共同的特徵。它是計算控制器參數的方法。通過牛頓方法推導的板上球數學模型和直流電機位置環路控制也是本文的一部分。&lt;/p&gt;
&lt;p&gt;文章四：Design and Implementation a Ball Balancing System for Control Theory Course（控制理論課程的球平衡系統設計與實現）&lt;/p&gt;
&lt;p&gt;摘要內容：開發一個球平衡系統，使用微控制器和相關控制演算法來保持球在橫樑上的平衡，以通過即時感官反饋調整橫樑的角度。在此過程中，製作了三個原型並相互比較，特別是在合理性和成本方面。通過集成一個伺服電機、一個距離感測器、一個微控制器板和一個機械平臺，可以很容易地設計整個系統。此外，他們將通過微控制器程式設計來理解和實現控制演算法。如果學生對MATLAB知之甚少。開發介面程式以在MATLAB中繪製即時位置曲線。這個簡化的系統將作為連接理論知識和實踐技能的橋樑。所提方法也適用於更複雜的系統。&lt;/p&gt;
&lt;p&gt;文章五: Ball on the plate balancing control system (板上球平衡控制系統)&lt;/p&gt;
&lt;p&gt;摘要內容 : 平衡問題是一個持續的研究挑戰，適用於從教育到交通的許多興趣領域。二自由度球平衡實驗室試驗台是瞭解控制系統的重要設備。本文重點介紹了在板上平衡球的機械設計。使用電阻式觸摸屏獲取球體位置數據，使用步進電機和位置傳感器控制平台傾斜角度。 設計基於 AVR 微控制器的雙環下屬控制系統，使用 PID 控制器維持球體平衡。&lt;/p&gt;
&lt;p&gt;文章六 : 2D Ball Balancer Control using QUARC (使用 QUARC 的 2D 球平衡器控制)&lt;/p&gt;
&lt;p&gt;摘要內容 : 使用 QUARC 軟體設計和實現球體在二維平台上的位置控制。 設計 PD 和 PID 控制器，並探討設定點權重和積分器抗飽和等控制技術。 使用攝像頭讀取球體位置，並進行校準和轉換。&lt;/p&gt;
&lt;h1&gt;任務3&lt;/h1&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry></feed>